-- ========================================================
-- 1️⃣ Table audit_logs
-- ========================================================
CREATE TABLE IF NOT EXISTS audit_logs (
    id SERIAL PRIMARY KEY,
    log_time TIMESTAMP NOT NULL DEFAULT NOW(),  -- date et heure de l'action
    username TEXT NOT NULL DEFAULT 'system',    -- utilisateur qui a fait le changement
    table_name TEXT NOT NULL,                   -- table affectée
    action_type TEXT NOT NULL,                  -- INSERT, UPDATE, DELETE
    old_data JSONB,                             -- tous les champs avant modification
    new_data JSONB                              -- tous les champs après modification
);

-- ========================================================
-- 2️⃣ Fonction trigger (logge tous les champs)
-- ========================================================
CREATE OR REPLACE FUNCTION audit_trigger_func() RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        INSERT INTO audit_logs(username, table_name, action_type, new_data)
        VALUES (
            current_setting('app.current_user', true),
            TG_TABLE_NAME,
            TG_OP,
            to_jsonb(NEW)
        );
        RETURN NEW;

    ELSIF TG_OP = 'UPDATE' THEN
        INSERT INTO audit_logs(username, table_name, action_type, old_data, new_data)
        VALUES (
            current_setting('app.current_user', true),
            TG_TABLE_NAME,
            TG_OP,
            to_jsonb(OLD),
            to_jsonb(NEW)
        );
        RETURN NEW;

    ELSIF TG_OP = 'DELETE' THEN
        INSERT INTO audit_logs(username, table_name, action_type, old_data)
        VALUES (
            current_setting('app.current_user', true),
            TG_TABLE_NAME,
            TG_OP,
            to_jsonb(OLD)
        );
        RETURN OLD;
    END IF;
END;
$$ LANGUAGE plpgsql;

-- ========================================================
-- Création des triggers pour anagrafica et ses tables liées
-- ========================================================
DO $$
DECLARE
    tbl_name TEXT;
    trig_name TEXT;
    tables_to_audit TEXT[] := ARRAY[
        'anagrafica',
		'abilitazioni',
		'albo',
		'attivita_professionale',
		'contatti',
        'recapiti',
		'settori',
		'studi_associati',
		'titoli'
    ];
BEGIN
    FOREACH tbl_name IN ARRAY tables_to_audit
    LOOP
        trig_name := tbl_name || '_audit';

        IF NOT EXISTS (
            SELECT 1 FROM pg_trigger WHERE tgname = trig_name
        ) THEN
            EXECUTE format(
                'CREATE TRIGGER %I
                 AFTER INSERT OR UPDATE OR DELETE ON %I
                 FOR EACH ROW EXECUTE FUNCTION audit_trigger_func();',
                trig_name, tbl_name
            );
        END IF;
    END LOOP;
END$$;






-- ========================================================
-- 1️⃣ Supprimer tous les triggers d’audit sur toutes les tables
-- ========================================================
DO $$
DECLARE
    trig RECORD;
BEGIN
    FOR trig IN
        SELECT tgname, tgrelid::regclass::text AS table_name
        FROM pg_trigger
        WHERE NOT tgisinternal  -- ignore les triggers internes
          AND tgrelid::regclass::text <> 'audit_logs'
    LOOP
        RAISE NOTICE 'Dropping trigger % on table %', trig.tgname, trig.table_name;
        EXECUTE format('DROP TRIGGER IF EXISTS %I ON %I;', trig.tgname, trig.table_name);
    END LOOP;
END$$;

-- ========================================================
-- 2️⃣ Supprimer la fonction trigger
-- ========================================================
DROP FUNCTION IF EXISTS audit_trigger_func();

-- ========================================================
-- 3️⃣ Supprimer la table audit_logs
-- ========================================================
DROP TABLE IF EXISTS audit_logs;






SELECT * 
FROM audit_logs

ORDER BY log_time DESC
LIMIT 100;
